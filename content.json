{"meta":{"title":"Blog | Snowme34","subtitle":null,"description":"A blog of a developer","author":"snowme34","url":"https://blog.snowme34.com","root":"/"},"pages":[{"title":"Not Found","date":"2018-10-26T16:22:07.520Z","updated":"2018-10-26T16:22:07.520Z","comments":false,"path":"404.html","permalink":"https://blog.snowme34.com/404.html","excerpt":"","text":"Sorry, wrong link (╥_╥)Please try to fix the link or search in this site!The search bar is on the left corner for desktop and on the top for mobile."},{"title":"About","date":"2023-06-26T05:40:49.913Z","updated":"2023-06-26T05:40:49.913Z","comments":false,"path":"about/index.html","permalink":"https://blog.snowme34.com/about/index.html","excerpt":"","text":"Life’s but a walking shadow, a poor player that struts and frets his hour upon the stage, and then is heard no more. This is a [site] told by an idiot, full of sound and fury, signifying nothing. ― William Shakespeare, MacbethWhen the author happen to encounter interesting common problems to solve, they may gain the leisure to take notes and write down something of little significance.Yet the zero gain gradually defeated the purposes."},{"title":"Categories","date":"2018-10-26T16:22:07.531Z","updated":"2018-10-26T16:22:07.531Z","comments":false,"path":"categories/index.html","permalink":"https://blog.snowme34.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-10-26T16:22:07.542Z","updated":"2018-10-26T16:22:07.542Z","comments":false,"path":"repository/index.html","permalink":"https://blog.snowme34.com/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-10-26T16:22:07.543Z","updated":"2018-10-26T16:22:07.543Z","comments":false,"path":"tags/index.html","permalink":"https://blog.snowme34.com/tags/index.html","excerpt":"","text":""},{"title":"test","date":"2018-10-26T16:22:07.544Z","updated":"2018-10-26T16:22:07.544Z","comments":false,"path":"test.html","permalink":"https://blog.snowme34.com/test.html","excerpt":"","text":"Hellojust a test page ^_^"}],"posts":[{"title":"K3s Cluster in Docker-Compose Running PHP Nginx","slug":"k3s-cluster-in-docker-compose-running-php-nginx","date":"2020-01-05T07:38:30.000Z","updated":"2020-01-07T04:56:03.127Z","comments":true,"path":"post/k3s-cluster-in-docker-compose-running-php-nginx/","link":"","permalink":"https://blog.snowme34.com/post/k3s-cluster-in-docker-compose-running-php-nginx/","excerpt":"","text":"Run a K3s cluster in docker-compose with PHP + Nginx on 1 Gb, 1 vCPU server.If anything goes wrong: read documents; check if the versions match (things are changing every day)At the end of this page includes a list of links used as reference when writing.Table of ContentTable of ContentEnvironmentPrerequisitesSet Up DirectoryLaunch the Cluster using Docker-ComposeTalk to the ClusterCreate Cluster ConfigsSSL KeyNginx SnippetsNginx SitePHP codePHP ResourcesNginx ResourcesConfig and Run the ClusterResultStop and Clean upConclusion and ThoughtsFuture WorksReferenceEnvironment1 GB Memory1 vCPU25 GB SSDDebian 10.2 on Digital Ocean DropletPrerequisitesdockerdocker-composea domain if wish to use https (and certificates)Try this to set up but it’s more stable to use iptables at this moment (01/04/2020):Set Up Debian 10 Server on Digital OceanSet Up DirectoryFeel free to choose any work directory, but for the purpose of simplicity, a directory owned by a non-root user in the root directory (/) will be used for this task.1234sudo mkdir -v /docker/# replace with your non-root user name and group# (default group name is the same as the user name)sudo chown __NAME__:__GROUP__ /docker/To make it easier to manage and run scripts, create a bin directoryhere it is under /docker/alternatively, put it under ~/, some distribution will automatically append it to $PATH($PATH is a list of directories that the shell will use to look for commands/executables)editing the $PATH variable is optionalit makes calling the script the same as calling normal commands12345mkdir -v /docker/bin/# pre-pend it to PATH, making the search end earlierecho \"PATH=/docker/bin:$PATH\" &gt;&gt; ~/.bashrcsource ~/.bashrcIt doesn’t hurt to create several sub-directories for:Kubernetes resource yaml filesvolumes to mount123456mkdir -v /docker/k3smkdir -v /docker/kube# this directory holds the PHP code, i.e. the index.php# explained latermkdir -v /docker/wwwLaunch the Cluster using Docker-ComposeAs easy as one simple docker-compile file from k3s official repoModifications:rename servicesdisable traefik by --no-deploy traefikmount directory with kubeconfig to host’s ./k3s (created above)mount php-code directory to container’s /var/wwwopen 80 and 443 (http/https) port for agents123456789101112131415161718192021222324252627282930313233343536373839404142# to run define K3S_TOKEN, K3S_VERSION is optional, eg:# K3S_TOKEN=$&#123;RANDOM&#125;$&#123;RANDOM&#125;$&#123;RANDOM&#125; docker-compose upversion: '3'services: k3s-server: image: \"rancher/k3s:$&#123;K3S_VERSION:-latest&#125;\" command: server --no-deploy traefik tmpfs: - /run - /var/run privileged: true environment: - K3S_TOKEN=$&#123;K3S_TOKEN:?err&#125; - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml - K3S_KUBECONFIG_MODE=666 volumes: - k3s-server:/var/lib/rancher/k3s # This is just so that we get the kubeconfig file out - ./k3s:/output - /docker/www:/var/www ports: - 6443:6443 k3s-agent: image: \"rancher/k3s:$&#123;K3S_VERSION:-latest&#125;\" tmpfs: - /run - /var/run privileged: true environment: - K3S_URL=https://k3s-server:6443 - K3S_TOKEN=$&#123;K3S_TOKEN:?err&#125; volumes: - /docker/www:/var/www ports: - 80:80 - 443:443volumes: k3s-server: &#123;&#125;Let’s create a script to run it:12touch /docker/bin/k3s-upchmod u+x /docker/bin/k3s-upInside the up script:12345678910#!/bin/bash# feel free to change thisexport K3S_TOKEN=$&#123;RANDOM&#125;$&#123;RANDOM&#125;$&#123;RANDOM&#125;$&#123;RANDOM&#125;$&#123;RANDOM&#125;echo \"K3S_TOKEN: $&#123;K3S_TOKEN&#125;\"# might want to store token somewhere, e.g.#echo $&#123;K3S_TOKEN&#125; &gt; ~/.token/K3S_TOKENdocker-compose -f /docker/docker-compose.yml up -d --scale k3s-agent=\"$&#123;1:-1&#125;\"Now we just need to run this scriptsince the directory is in $PATH, we can call it directlyit creates 1 agent by default, can change it by providing command line argument12k3s-up # spawn 1 agents#k3s-up 3 # spawn 3 agentsDue to extreme memory constrain, let’s begin with 1 agentTalk to the ClusterNow the k3s cluster is up and running.The system might go through a short thrashing period but it will settle down soon (tested on real machine).It’s time to kubectl. Let’s use the $KUBECONFIG variable to simplify things:1export KUBECONFIG=/docker/k3s/kubeconfig.yamlMight as well add this line to bashrc (optional):so that current user’s shell will automatically set KUBECONFIG variable1echo \"export KUBECONFIG=/docker/k3s/kubeconfig.yaml\" &gt;&gt; ~/.bashrcTest connection12kubectl get nodeskubectl get pods --all-namespacesIf not working, consult docker and other logs123docker psdocker logs...Create Cluster ConfigsAttempts to use nginx ingress have been made in vain because of the limited resources.We shall use our own nginx, plus load balancer service provided by k3s (good to be simple for simple tasks).Start with the config maps:note: provided nginx configs may not suit every one’s need123mkdir /docker/kube/config-nginx-key # SSL key, if intend to use httpsmkdir /docker/kube/config-nginx-sites # nginx config for each sitemkdir /docker/kube/config-nginx-snippets # re-useable snippetsLet’s go through each config filemain reference for nginx configSSL Key(skip if using http)Files in /docker/kube/config-nginx-key:12345678# SSL certificatescert.pemcert.key# Diffie-Hellman parameters# used by Nginx# https://wiki.openssl.org/index.php/Diffie-Hellman_parametersdhparam.pem # openssl dhparam -out ./dhparam.pem 4096For security reasons, my own SSL certificates will not be included here.Because I use Cloudflare, my cluster uses Cloudflare Origin CA certificatesAlso it does not require complex verification, renewal steps etc.If not suitable, might consider a cert manager (linked article uses ingress). That is beyond of the scope of this articleNginx SnippetsFiles in /docker/kube/config-nginx-snippets:123ssl-some.host.confssl-params.confsecurity.confssl-some.host.confjust telling nginx which certificates to use12ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl-key&#x2F;cert.pem;ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl-key&#x2F;cert.key;ssl-params.confcipherli.stString SSL Security On NginxSecurity/Server Side TLS - MozillaWikialso if you are using Cloudflare like I do, end-users may see different headers etc.since clients are talking to Cloudflare, not the host machine directly in general cases1234567891011121314151617# SSLssl_session_timeout 1d;ssl_session_cache shared:SSL:10m;ssl_session_tickets off;# Diffie-Hellman parameter for DHE ciphersuitesssl_dhparam &#x2F;etc&#x2F;nginx&#x2F;ssl-key&#x2F;dhparam.pem;# Mozilla Intermediate configurationssl_protocols TLSv1.2 TLSv1.3;ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;# OCSP Staplingssl_stapling on;ssl_stapling_verify on;resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid&#x3D;60s;resolver_timeout 2s;security.conf123456789101112131415161718192021222324252627# security headersadd_header X-Frame-Options &quot;SAMEORIGIN&quot; always;add_header X-XSS-Protection &quot;1; mode&#x3D;block&quot; always;add_header X-Content-Type-Options &quot;nosniff&quot; always;add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;add_header Content-Security-Policy &quot;default-src &#39;self&#39; http: https: data: blob: &#39;unsafe-inline&#39;&quot; always;add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubDomains; preload&quot; always;# . fileslocation ~ &#x2F;\\.(?!well-known) &#123; deny all;&#125;## misc## not for security but included here for simplicity# favicon.icolocation &#x3D; &#x2F;favicon.ico &#123; log_not_found off; access_log off;&#125;# robots.txtlocation &#x3D; &#x2F;robots.txt &#123; log_not_found off; access_log off;&#125;Nginx Site1/docker/kube/config-nginx-sites/php.confHeavily inspired by:PHP FastCGI ExampleHow To Deploy a PHP Application with Kubernetes on Ubuntu 18.04 | DigitalOceanChoose one of the below:http123456789101112131415161718server &#123; index index.php index.html; root &#x2F;var&#x2F;www; location &#x2F; &#123; try_files $uri $uri&#x2F; &#x2F;index.php?$query_string; &#125; location ~ \\.php$ &#123; try_files $uri &#x3D;404; fastcgi_split_path_info ^(.+\\.php)(&#x2F;.+)$; fastcgi_pass kube-php:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; &#125;&#125;https123456789101112131415161718192021222324252627server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; include &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;ssl-some.host.conf; include &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;ssl-params.conf; root &#x2F;var&#x2F;www; index index.html index.php; ### change to your own host name ### server_name some.host; include &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;security.conf; location ~ [^&#x2F;]\\.php(&#x2F;|$) &#123; fastcgi_split_path_info ^(.+?\\.php)(&#x2F;.*)$; if (!-f $document_root$fastcgi_script_name) &#123; return 404; &#125; fastcgi_param HTTP_PROXY &quot;&quot;; fastcgi_pass kube-php:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; &#125;&#125;Back to our kubernetes cluster, now we need to create:PHP codePHP servicePHP deploymentnginx service LoadBalancernginx deployment1mkdir -v /docker/kube/objectsWill use one file for related resourcesPHP codeFor simplicity, the PHP code is directly put into /docker/wwwSample PHP file, put to /docker/www/index.php:12&lt;?phpecho phpinfo();PHP Resources1editor /docker/kube/objects/php.yamlInside the yaml:it exposes port 9000 via ClusterIP (default networking for service) for php-fpmphp:7-fpm image is usedthe php code directory mounted earlier, /var/www, is mounted as a hostPath volumegenerally not something desired in productionA possibly related link and another.might consider a kubernetes init container to set up the code etc.12345678910111213141516171819202122232425262728293031323334353637383940414243apiVersion: v1kind: Servicemetadata: name: kube-php labels: tier: backendspec: ports: - protocol: TCP port: 9000 selector: app: kube-php tier: backend---apiVersion: apps/v1kind: Deploymentmetadata: name: kube-php labels: tier: backendspec: replicas: 1 selector: matchLabels: app: kube-php tier: backend template: metadata: labels: app: kube-php tier: backend spec: containers: - name: php image: php:7-fpm volumeMounts: - name: www mountPath: /var/www volumes: - name: www hostPath: path: /var/www type: DirectoryNginx Resources1editor /docker/kube/objects/nginx.yamlInside the yaml:a LoadBalancer service is created with port 80 and 443thanks to k3s’s networking, normally a bare-mental kubernetes cannot use LoadBalancer services(“LoadBalancer services … points to external load balancers that are NOT in your cluster”)a deployment is created using nginx:1.16 imagea naive and simple approach to test the config online is includedthe config maps to be created are mounted as directoriesabout nginx conf:nginx will automatically load conf in /etc/nginx/conf.dfor our case, our php.conf will include all other config files1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071apiVersion: v1kind: Servicemetadata: name: kube-nginx labels: tier: backendspec: type: LoadBalancer ports: - protocol: TCP port: 80 name: http - protocol: TCP port: 443 name: https selector: app: kube-nginx tier: backend---apiVersion: apps/v1kind: Deploymentmetadata: name: kube-nginx labels: tier: backendspec: replicas: 1 selector: matchLabels: app: kube-nginx tier: backend template: metadata: labels: app: kube-nginx tier: backend spec: containers: - name: nginx image: nginx:1.16 ## uncomment this to test the nginx config ## use something like `kubectl logs kube-nginx-...` to see the output ## use `kubectl delete deployment ...` to remove the test deployment #command: [\"/bin/bash\",\"-c\"] #args: [\"echo testing-nginx-conf; nginx -t; sleep 10h\"] ports: - containerPort: 80 - containerPort: 443 volumeMounts: - name: nginx-key mountPath: /etc/nginx/ssl-key - name: nginx-snippets mountPath: /etc/nginx/snippets - name: nginx-sites mountPath: /etc/nginx/conf.d - name: www mountPath: /var/www volumes: - name: nginx-key configMap: name: config-nginx-key - name: nginx-snippets configMap: name: config-nginx-snippets - name: nginx-sites configMap: name: config-nginx-sites - name: www hostPath: path: /var/www type: DirectoryConfig and Run the ClusterNow we have both the configs and the Kubernetes resources files ready.Just a short script will do all the setup12touch /docker/bin/k3s-setupchmod u+x /docker/bin/k3s-setupInside the setup script1234567891011121314151617#!/bin/bash# ensure the config worksexport KUBECONFIG=/docker/k3s/kubeconfig.yamlset -e# test connection (optional)kubectl get node# nginx configkubectl create configmap config-nginx-key --from-file=/docker/kube/config_nginx-keykubectl create configmap config-nginx-snippets --from-file=/docker/kube/config_nginx-snippetskubectl create configmap config-nginx-sites --from-file=/docker/kube/config_nginx-sites# apply kubectl apply -f /docker/kube/objectsRun the script1k3s-setupResultThe whole server might suffer from a short period of thrashing after starting everything.Assume all firewall, certificates and so forth all set up, go to http://host-ip or https://some.host (depend on your choice).The PHP application will show up.Each access to my host leads to around 40K context switches.Stop and Clean upIf encounter errors in the previous steps, or need a graceful shutdown, here is a nothing-left-behind clean up script.12touch /docker/bin/k3s-downchmod u+x /docker/bin/k3s-downInside the down script:shut down via docker-composeremove the used master server volume12345678910# the existence of this variable is required by the docker-compose fileexport K3S_TOKEN=NOTHING# if you want the original token, might consider storing it somewhere, e.g.#export K3S_TOKEN=$(cat ~/.token/K3S_TOKEN)docker-compose -f /docker/docker-compose.yml down -v# optional, delete the no-longer-valid kubeconfigrm -f /docker/k3s/kubeconfig.yaml#might remove the saved K3S_TOKEN as wellConclusion and ThoughtsThe purpose of Kubernetes is not, clearly, doing things like this.But the k3s cluster created is perfect for dev and testing, especially for single-machine. And it’s fun to run a fully-functional Kubernetes on the cutest VPS!Future Worksmake the cluster persistentcurrently cleaning everything upmight use docker-compose stop, but ideally only the master data is neededpotentially related: How to make a full backup of k3s server’s data? · Issue #927 · rancher/k3suse secretsReferenceSome of documents/tutorials are not updated or no longer working.TutorialsHow To Deploy a PHP Application with Kubernetes on Ubuntu 18.04 | DigitalOceanHow to Set Up an Nginx Ingress with Cert-Manager on DigitalOcean Kubernetes | DigitalOceandocker-composeでK3sを試してみた - QiitaSingle node Kubernetes setup – /techblogHow To Create a Kubernetes Cluster Using Kubeadm on Ubuntu 18.04 | DigitalOceanK3sInstallation OptionsNetworkingAdvanced Options and ConfigurationVolumes and Storagelocal-path-provisioner/README.md at master · rancher/local-path-provisionerKubernetesK3s, minikube or microk8s? : kubernetesResources + Controllers Overview · The Kubectl BookDebug Pod Replication Controller - KubernetesCreating a single control-plane cluster with kubeadm - KubernetesKubernetes VolumesVolumes - Kubernetes hostPathConfigure a Pod to Use a ConfigMap - KubernetesPersistent Volumes - KubernetesKubernetes 1.14: Local Persistent Volumes GA - KubernetesStorage Classes - Kubernetes localcommunity/resources.md at master · kubernetes/communityKubernetes NetworkingIngress vs Load BalancerIngress - KubernetesBare-metal considerations - NGINX Ingress ControllerExposing FCGI services - NGINX Ingress Controllersymfony - NGINX - PHP-FPM multiple application K8s/Ingress - Stack Overflowingress-nginx/docs/examples/multi-tls at master · kubernetes/ingress-nginxNginx configStrong SSL Security on nginx - Raymii.orgh5bp/server-configs-nginx: Nginx HTTP server boilerplate configsRemove deprecated ciphers and protocols by aeris · Pull Request #190 · h5bp/server-configs-nginxUse modern SSL config for Nginx by swalkinshaw · Pull Request #1127 · roots/trellisSecurity/Server Side TLS - MozillaWikiCryptCheck","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"},{"name":"Web-hosting","slug":"Notes/Web-hosting","permalink":"https://blog.snowme34.com/categories/Notes/Web-hosting/"}],"tags":[{"name":"Web-hosting","slug":"Web-hosting","permalink":"https://blog.snowme34.com/tags/Web-hosting/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://blog.snowme34.com/tags/Kubernetes/"},{"name":"Container","slug":"Container","permalink":"https://blog.snowme34.com/tags/Container/"}]},{"title":"Schedule Tasks Using Crontab on Windows 10 with WSL","slug":"schedule-tasks-using-crontab-on-windows-10-with-wsl","date":"2018-09-26T00:36:10.000Z","updated":"2019-12-31T04:44:10.688Z","comments":true,"path":"post/schedule-tasks-using-crontab-on-windows-10-with-wsl/","link":"","permalink":"https://blog.snowme34.com/post/schedule-tasks-using-crontab-on-windows-10-with-wsl/","excerpt":"","text":"Update (12/30/2019): This was originally written on 09/25/2018 and was for WSL 1. At the time of writing this line, the setup for my WSL 1 still works (with win10 1909).This is a short tutorial about how to use WSL(Windows Subsystem for Linux) to schedule cron jobs, with a specific example of backing up Evernote’s database, to show how versatile this method is and potential benefits. In this example, the strategy is optimized for large files that have frequent small changes regarding I/O writes.Jump directly to procedureMotivationIt was the second time for me to lose a note in Evernote. The first one was due to a sync error. It was nothing serious but unnerving. But I lost the second one merely after I locked my phone while being prompted to type the password for some encrypted text in that note. And the problem is, I have almost no direct way to know if a note is missing considering the size of my Evernote database.So, after searching around, I decided that, since Evernote is still the best app for my note taking (it has unlimited cloud storage, support for most platforms, bots for different apps etc.) and there is no 100% secure data storage in this world, I need to backup the database file on my own.Side note: I saw a lot of discussion about switching applications to have more secure database. Unfortunately, that is not the case. Evernote is mature enough that the official client gives users the option to backup the database directly and access with ease later on. To prevent data loss, the ultimate solution is to have multiple backups.Why rsync and WSLIt is tedious to manually copy and paste the database files to other locations (and track the version history). Storing the db directly inside the local cloud storage sync folder is also not feasible for me since those applications need to scan my 3.14 GB .exb file each time when I make any tiny changes to my notes.I need a scheduled job with minimum disk usage (reading and writing). The reading part is hard to get rid of. So the focus is I/O write usage. I need a binary incremental backup. rsync is the best candidate I know so far but it does not have native support for Windows.My SolutionSince I need my cloud storage application to run in the background all the time, it is not viable for me to schedule that application to sync. The workaround is to use scheduled rsync to copy the .exb file to the local sync folder.rsync is able to do binary incremental copy, keeping the write usage at minimum. And the sync application only reads the local file as scheduled (my specific application, Dropbox, can binary incremental sync, too). Unless there is a way to directly binary incremental copy to the cloud as scheduled while the other parts are not affected, this solution only needs 2 full scans and very little write + upload to work.(I know rclone but it does not support binary incremental upload)ProcedureAbout the Database FileThere is an official guide for it. It explains how to find the location, how to export the note from a database file and so on.PreparationIf not installed yet, install cloud storage sync clients, WSL for Windows, cron and rsync based on the Linux distro installed.Decide the rsync CommandTo learn more about cron, use man cron and man crontab or search online.Please at least read the rsync --help and decide which options are preferred. The following command is the one I am using.1rsync -u -t -av -n /mnt/c/Evernote/Databases/myName.exb /mnt/c/Dropbox/EvernoteDB/myName.exbThe -n flag enables dry-run. Remove it after everything is confirmed to be correct by running this command directly (and see the result).Create crontab JobLog in as the user you want to run the job (note the privileges) and edit their crontab:1crontab -eUsing the editor chosen, add this line:122 22 *&#x2F;2 * * rsync -u -t -av &#x2F;mnt&#x2F;c&#x2F;Evernote&#x2F;Databases&#x2F;myName.exb &#x2F;mnt&#x2F;c&#x2F;Dropbox&#x2F;EvernoteDB&#x2F;myName.exb &gt; &#x2F;dev&#x2F;nullThis is my config. It will run the command every 2 days at 22:22 (10:22 pm) and thus backup my Evernote database every 2 days.If you want to learn more about crontab job, feel free to search on your own.If you want, you can use the snapshot feature of rsync. But since Dropbox has pretty good version history, I did not include that.(Since a note might be found missing after a long time, I highly recommend manually adding backups for longer period, Like a full backup for each half year using another cron job)Make the Daemon start at Windows BootThe last step is to make sure the cron daemon runs in background when Windows boots. It can be achieved by making bash.exe/wsl.exe a service and so on.The solution I chose was to create a shortcut containing a start command in the shell:startup folder. Feel free to have your own choices and search around.First, make sure the start command can be run without root privilege, unless you want to type in your sudo password every time you boot Windows.Open sudo config file:1sudo visudoAdd the following line:1%sudo ALL&#x3D;NOPASSWD: &#x2F;etc&#x2F;init.d&#x2F;cron startSave and quit and fix any problem if prompted.Next, type shell:startup in the Run and explorer will open the startup folder.Create a shortcut to wsl.exe and edit the properties as following:1C:\\Windows\\System32\\wsl.exe sudo &#x2F;etc&#x2F;init.d&#x2F;cron startAnd it should work unless the developers change how wsl works in the future.Check If cron Service Started ProperlyIf you are worrying about cron service, here is a way to test it.Create a test job in crontab. For example:135 * * * * echo &quot;test&quot; &gt;&gt; &#x2F;home&#x2F;MY_USER&#x2F;testIt will append “test” to a file in that path for every hour at 35.First wait for the job to run first time and check the file to see result.Now manually terminate the cron service and reboot Windows to see if it works.1wsl sudo /etc/init.d/cron stopAfter reboot, check task manager to see if there is a process called cron running.Wait for the to run second time and check the result.The command above is only an example. You can change it however you like.ConclusionUntil now, it should be clear that what I did is only a little trick. But it shows how Unix commands can make Windows easier to use with WSL.Referencewsl-autostartHow to run Ubuntu service on Windows (at startup)?How To Add Jobs To cron Under Linux or UNIXrsync server using Windows Subsystem for LinuxLinux Start Restart and Stop The Cron or Crond ServiceHow to auto start serviceman page of each commandUpdates11/16/2018: changed the original title and added abstract summary","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Trick","slug":"Trick","permalink":"https://blog.snowme34.com/tags/Trick/"}]},{"title":"Shakespeare Sonnet 18 Chinese Translation","slug":"Sonnet-18-zh-CN-translation","date":"2018-03-22T06:49:40.000Z","updated":"2023-06-26T05:34:16.813Z","comments":true,"path":"post/Sonnet-18-zh-CN-translation/","link":"","permalink":"https://blog.snowme34.com/post/Sonnet-18-zh-CN-translation/","excerpt":"","text":"Sonnet 18 作者：莎士比亚 William Shakespeare 翻译：snowme34 非商业转载请标明出处，商业转载请联系作者获得授权Shall I compare thee to a summer’s day? 我能，把你比作一个夏天吗？Thou art more lovely and more temperate: 可你，却更可爱而又更纤婉:Rough winds do shake the darling buds of May, 暴风，摇曳着五月的娇柔花蔓，And summer’s lease hath all too short a date: 夏止，默默离去之间的悄然:Sometime too hot the eye of heaven shines, 时时，天堂的光辉金迷纸醉，And often is his gold complexion dimm’d; 看吧，他高贵的面容已日渐憔悴;And every fair from fair sometime declines, 即是，雍容之物终将会破碎，By chance, or nature’s changing course, untrimm’d; 只因，偶然亦或是自然之愧；But thy eternall summer shall not fade, 但是，永恒之夏绝不凋零，Nor loose possession of that fair thou ow’st; 也不，不愿失去珍贵感情;Nor shall Death brag thou wander’st in his shade, 亦无，无人手持镰斧之柄，When in eternal lines to time thou grow’st: 而当一切，恒如此诗此时:So long as men can breathe, or eyes can see, 恒如，生灵之吐息之执， 恒如，视界之尽头之尺，So long lives this, and this gives life to thee. 恒如，生之所生， 恒如，你亘古的美丽。","categories":[{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/categories/Literature/"},{"name":"Translations","slug":"Literature/Translations","permalink":"https://blog.snowme34.com/categories/Literature/Translations/"}],"tags":[{"name":"Shakespeare","slug":"Shakespeare","permalink":"https://blog.snowme34.com/tags/Shakespeare/"},{"name":"zh-CN","slug":"zh-CN","permalink":"https://blog.snowme34.com/tags/zh-CN/"},{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/tags/Literature/"},{"name":"Original","slug":"Original","permalink":"https://blog.snowme34.com/tags/Original/"}]}],"categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"},{"name":"Web-hosting","slug":"Notes/Web-hosting","permalink":"https://blog.snowme34.com/categories/Notes/Web-hosting/"},{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/categories/Literature/"},{"name":"Translations","slug":"Literature/Translations","permalink":"https://blog.snowme34.com/categories/Literature/Translations/"}],"tags":[{"name":"Web-hosting","slug":"Web-hosting","permalink":"https://blog.snowme34.com/tags/Web-hosting/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://blog.snowme34.com/tags/Kubernetes/"},{"name":"Container","slug":"Container","permalink":"https://blog.snowme34.com/tags/Container/"},{"name":"Trick","slug":"Trick","permalink":"https://blog.snowme34.com/tags/Trick/"},{"name":"Shakespeare","slug":"Shakespeare","permalink":"https://blog.snowme34.com/tags/Shakespeare/"},{"name":"zh-CN","slug":"zh-CN","permalink":"https://blog.snowme34.com/tags/zh-CN/"},{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/tags/Literature/"},{"name":"Original","slug":"Original","permalink":"https://blog.snowme34.com/tags/Original/"}]}