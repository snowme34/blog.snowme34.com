{"meta":{"title":"Blog | Snowme34","subtitle":null,"description":"A blog of a developer","author":"snowme34","url":"https://blog.snowme34.com"},"pages":[{"title":"Not Found","date":"2018-10-26T16:22:07.520Z","updated":"2018-10-26T16:22:07.520Z","comments":false,"path":"404.html","permalink":"https://blog.snowme34.com/404.html","excerpt":"","text":"Sorry, wrong link (╥_╥) Please try to fix the link or search in this site! The search bar is on the left corner for desktop and on the top for mobile."},{"title":"About","date":"2019-01-13T08:53:09.782Z","updated":"2019-01-13T08:53:09.782Z","comments":false,"path":"about/index.html","permalink":"https://blog.snowme34.com/about/index.html","excerpt":"","text":"About Site Life’s but a walking shadow, a poor player that struts and frets his hour upon the stage, and then is heard no more. This is a [site] told by an idiot, full of sound and fury, signifying nothing. ― William Shakespeare, Macbeth About Me Student. Experiences In reverse chronological order. open source projects Hackathons college education about theories coding competitions build snowme34.com (3rd domains and 8th servers) C++ primer Machine Learning and Python on Coursera vice-minister of a department in student union Skills See side bar for levels of top ones. Number of stars represents my confidence level and is adjusted based on my understanding about illusory superiority and Dunning–Kruger effect. Excluding things like git or soldering (too basic). Technical Bash C C++ Data Mining DevOps Digital circuit design Java JavaScript Linux Load Test MATLAB Python Verilog Web-hosting Theoretical Data Structure Algorithms Calculus Probability Theory Computer Organization Systems Programming Analog Design Design UI/UX Design Graphic Design (Photoshop) Movie Editing (Adobe Premier) Leadership Team Management Project Design Languages Mandarin English Japanese Technologies Interacted with Outstanding ones only Python Scikit-learn library Python Keras library Firebase Docker Nginx MySQL/MariaDB Oracle Database MongoDB JMeter ReactJS React Redux Material-UI Spring Cloud Framework Swagger MyBatis Maven Vue.js Webpack SASS Interests Algorithms, Containers, Database, Data Structures Sports Free-climbing Swimming Music Erhu Art Photography"},{"title":"Categories","date":"2018-10-26T16:22:07.531Z","updated":"2018-10-26T16:22:07.531Z","comments":false,"path":"categories/index.html","permalink":"https://blog.snowme34.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-10-26T16:22:07.542Z","updated":"2018-10-26T16:22:07.542Z","comments":false,"path":"repository/index.html","permalink":"https://blog.snowme34.com/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-10-26T16:22:07.543Z","updated":"2018-10-26T16:22:07.543Z","comments":false,"path":"tags/index.html","permalink":"https://blog.snowme34.com/tags/index.html","excerpt":"","text":""},{"title":"test","date":"2018-10-26T16:22:07.544Z","updated":"2018-10-26T16:22:07.544Z","comments":false,"path":"test.html","permalink":"https://blog.snowme34.com/test.html","excerpt":"","text":"Hello just a test page _"}],"posts":[{"title":"Schedule Tasks Using Crontab on Windows 10 with WSL","slug":"schedule-tasks-using-crontab-on-windows-10-with-wsl","date":"2018-09-26T00:36:10.000Z","updated":"2018-11-21T07:50:08.133Z","comments":true,"path":"post/schedule-tasks-using-crontab-on-windows-10-with-wsl/","link":"","permalink":"https://blog.snowme34.com/post/schedule-tasks-using-crontab-on-windows-10-with-wsl/","excerpt":"","text":"This is a short tutorial about how to use WSL(Windows Subsystem for Linux) to schedule cron jobs, with a specific example of backing up Evernote’s database, to show how versatile this method is and potential benefits. In this example, the strategy is optimized for large files that have frequent small changes regarding I/O writes. Jump directly to procedure Motivation It was the second time for me to lose a note in Evernote. The first one was due to a sync error. It was nothing serious but unnerving. But I lost the second one merely after I locked my phone while being prompted to type the password for some encrypted text in that note. And the problem is, I have almost no direct way to know if a note is missing considering the size of my Evernote database. So, after searching around, I decided that, since Evernote is still the best app for my note taking (it has unlimited cloud storage, support for most platforms, bots for different apps etc.) and there is no 100% secure data storage in this world, I need to backup the database file on my own. Side note: I saw a lot of discussion about switching applications to have more secure database. Unfortunately, that is not the case. Evernote is mature enough that the official client gives users the option to backup the database directly and access with ease later on. To prevent data loss, the ultimate solution is to have multiple backups. Why rsync and WSL It is tedious to manually copy and paste the database files to other locations (and track the version history). Storing the db directly inside the local cloud storage sync folder is also not feasible for me since those applications need to scan my 3.14 GB .exb file each time when I make any tiny changes to my notes. I need a scheduled job with minimum disk usage (reading and writing). The reading part is hard to get rid of. So the focus is I/O write usage. I need a binary incremental backup. rsync is the best candidate I know so far but it does not have native support for Windows. My Solution Since I need my cloud storage application to run in the background all the time, it is not viable for me to schedule that application to sync. The workaround is to use scheduled rsync to copy the .exb file to the local sync folder. rsync is able to do binary incremental copy, keeping the write usage at minimum. And the sync application only reads the local file as scheduled (my specific application, Dropbox, can binary incremental sync, too). Unless there is a way to directly binary incremental copy to the cloud as scheduled while the other parts are not affected, this solution only needs 2 full scans and very little write + upload to work. (I know rclone but it does not support binary incremental upload) Procedure About the Database File There is an official guide for it. It explains how to find the location, how to export the note from a database file and so on. Preparation If not installed yet, install cloud storage sync clients, WSL for Windows, cron and rsync based on the Linux distro installed. Decide the rsync Command To learn more about cron, use man cron and man crontab or search online. Please at least read the rsync --help and decide which options are preferred. The following command is the one I am using. 1rsync -u -t -av -n /mnt/c/Evernote/Databases/myName.exb /mnt/c/Dropbox/EvernoteDB/myName.exb The -n flag enables dry-run. Remove it after everything is confirmed to be correct by running this command directly (and see the result). Create crontab Job Log in as the user you want to run the job (note the privileges) and edit their crontab: 1crontab -e Using the editor chosen, add this line: 122 22 */2 * * rsync -u -t -av /mnt/c/Evernote/Databases/myName.exb /mnt/c/Dropbox/EvernoteDB/myName.exb &gt; /dev/null This is my config. It will run the command every 2 days at 22:22 (10:22 pm) and thus backup my Evernote database every 2 days. If you want to learn more about crontab job, feel free to search on your own. If you want, you can use the snapshot feature of rsync. But since Dropbox has pretty good version history, I did not include that. (Since a note might be found missing after a long time, I highly recommend manually adding backups for longer period, Like a full backup for each half year using another cron job) Make the Daemon start at Windows Boot The last step is to make sure the cron daemon runs in background when Windows boots. It can be achieved by making bash.exe/wsl.exe a service and so on. The solution I chose was to create a shortcut containing a start command in the shell:startup folder. Feel free to have your own choices and search around. First, make sure the start command can be run without root privilege, unless you want to type in your sudo password every time you boot Windows. Open sudo config file: 1sudo visudo Add the following line: 1%sudo ALL=NOPASSWD: /etc/init.d/cron start Save and quit and fix any problem if prompted. Next, type shell:startup in the Run and explorer will open the startup folder. Create a shortcut to wsl.exe and edit the properties as following: 1C:\\Windows\\System32\\wsl.exe sudo /etc/init.d/cron start And it should work unless the developers change how wsl works in the future. Check If cron Service Started Properly If you are worrying about cron service, here is a way to test it. Create a test job in crontab. For example: 135 * * * * echo &quot;test&quot; &gt;&gt; /home/MY_USER/test It will append “test” to a file in that path for every hour at 35. First wait for the job to run first time and check the file to see result. Now manually terminate the cron service and reboot Windows to see if it works. 1wsl sudo /etc/init.d/cron stop After reboot, check task manager to see if there is a process called cron running. Wait for the to run second time and check the result. The command above is only an example. You can change it however you like. Conclusion Until now, it should be clear that what I did is only a little trick. But it shows how Unix commands can make Windows easier to use with WSL. Reference wsl-autostart How to run Ubuntu service on Windows (at startup)? How To Add Jobs To cron Under Linux or UNIX rsync server using Windows Subsystem for Linux Linux Start Restart and Stop The Cron or Crond Service How to auto start service man page of each command Updates 11/16/2018: changed the original title and added abstract summary","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Trick","slug":"Trick","permalink":"https://blog.snowme34.com/tags/Trick/"}]},{"title":"Re-Rebuilding My Website","slug":"re-rebuild-note","date":"2018-09-20T04:40:01.000Z","updated":"2018-10-26T16:22:07.527Z","comments":true,"path":"post/re-rebuild-note/","link":"","permalink":"https://blog.snowme34.com/post/re-rebuild-note/","excerpt":"","text":"Now the thing works. But not working well. This is a log-like post for what I have done and plan to do for my website. Goal Have a really working website -with almost zero frontend knowledge 😄 Approach Make use of my limited frontend knowledge to read the code of open source projects and build mine according to the licenses. Not build from scratch, in a word. Analysis The domain is easy to get. The server is also not hard. But it is too much for my needs. After all, all I need is a simple website that displays something at minimum cost. Therefore, the static site, such as Github Pages, is the way to go. Blog It seems that the most popular way to go is a static blog hosted on Github Pages. And I’m also most experienced with that, too. So, let’s begin with creating a Hexo blog. Ready-to-use Hexo themes The first intuition was to find some themes listed on the website of Hexo. Learn from others - that’s how one improves. (I wrote this post on Sept 14th, 2018. Plenty of new ones are likely to be added to Hexo Themes) Here are the lists of some themes I found interesting while researching (links to demo): Blog Inside Material X TKL NexT.Pisces Vexo geekplus Pure gal Portfolio edinburgh standrews Wiki Wikitten Doc Doc Themes with some good details Ochuunn brilliant front page one intriguing interactive element random brilliant front page The themes I decided to use (links to repo) pure dawn typing Set up the blog Add themes as submodule of local git…done. Register a disqus account…done. Create a favicon…done. Change the config…working. Modify the source code…working. code block inner bar side bar for post font icon bottom bar … Details (detailed details) The first thing I decided to do was to change the appearance of the code blocks. I am not a big fan of any additional decoration for it. So I dived into the source code and looked for any codes related to “highlight”. The first thing I noticed was the partial styl files called “highlight”. I tried to edit it but nothing happened. I know Stylus is a dynamic stylesheet preprocessor language. Maybe I need to think about how Hexo compiles it? After trying to delete some, nothing happened to the website displayed. Then I noticed, the only file that it needs is the style.css alone. By targeting the highlight class, succeeded to remove the extra decorations. (I was thinking about the meaning of the Stylus files. But I gave them up considering all the cost, such as the need to import normalize.css, which would slow down the speed of such a small site of mine. And the most important problem is, I have no deep knowledge about things like Bootstrap) But the one left is… not beautiful. The next step I took was to revisit the list of the Hexo blogs with theme source codes. It seems that previously, I focused too much on the overall “feeling”. Some of them, thou having appealing effects, are exceedingly bad at details. One blog has light theme but dark code block. The codes found on another one is almost impossible to read due to the similar colors. Those were not good. From the ones I leafed through, the design of material-x stood out. Reading its source code, I created a not-so-bad highlight block for my blog. Next modification I did was to remove the sticky bar. For some unknown reason, while the sticky bar of the original blog would disappear as the user scrolls down, the one of mine never changed. It was always there and being distracting. This removal was not hard that hard. One of the most heated issues of the original theme was the its line height. I have no idea why the author chose to make the lines “crowded”. I believe he had his reasons. But, unfortunately, I am not clever enough to figure out them on my own. So I decided to change both the font and the line height. Choices are always hard to make when they are many. I searched again and again and even read about the difference between serif and sans serif (like the history and successful applications by big companies). I went to some online Wordpress theme stores to see what fonts they are using. But eventually, I just gave up and chose Open Sans instead. The hardest one had not come yet. When I tried to add my Instagram social link, I realized that the original theme did not support its icon. The icons in graphic design was a mystery to me since I saw no image files in the code. How could the website just draw a shape? After searching around, I came to know about the difference between SVG and iconfonts. “Well, the svg sprite looks cool! I wanna use that!” I managed to find the SVG sprite from the original theme. And hard-coding few additional SVG icons into it did not seem very hard. But, the theme here used the “font-class” way to do it. To have additional icons, I need a way to change the ttf files and maintained the original unicode. Or I need to rewrite all the related codes and functions. Changing all the codes was not impossible but too much to do right now. And I also need to debug the SVG sprite on my own without any related frontend knowledge. The difficulty was unpredictable. Therefore, the “font-class” way still seemed good to me. But now I need a way to “unpack and repack” the ttf icons. I tried to skip the “unpack” step by searching around to see if I could find the original icons. But it was so hard to keep the “names” of each icon identical in this way. Should I just delete all the unnecessary icons? Could I use some software to manage them? It was not easy especially when I am new. After messing around for quite a while, I suddenly found out the online app of icomoon could load the SVG sprite and regenerate the font files I needed. I doubted if it was so common and obvious that no one would ever have written a tutorial for me to learn this information. And it could keep all the “names” of the icons, too! I knew it was not a graceful way to do it. But it worked at least. It took some time for me to make the icon truly work. But the hard part was over, although I still spent a long time figuring out how the side-bars worked. The rest of the modification is all about small things, like fixing a logical statement, adding variables and so forth. I have written too much for a post so let’s stop here. If you are curious, you can read the “Readme.md” of the modified theme under my Github account. Home I feel like having a home page, clean and compelling, to serve as the “www” host of my domain, similar to the one of geekplus.com and my old home page. Reference my old website (local source code) xrlin ochukai.me geekplus.com Now I need a break (´._.`).","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"},{"name":"Web-hosting","slug":"Notes/Web-hosting","permalink":"https://blog.snowme34.com/categories/Notes/Web-hosting/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Web-hosting","slug":"Web-hosting","permalink":"https://blog.snowme34.com/tags/Web-hosting/"},{"name":"Log","slug":"Log","permalink":"https://blog.snowme34.com/tags/Log/"},{"name":"Diary","slug":"Diary","permalink":"https://blog.snowme34.com/tags/Diary/"},{"name":"Mess","slug":"Mess","permalink":"https://blog.snowme34.com/tags/Mess/"}]},{"title":"No Scary Git","slug":"no-scary-git","date":"2018-04-10T05:31:43.000Z","updated":"2018-10-26T16:22:07.526Z","comments":true,"path":"post/no-scary-git/","link":"","permalink":"https://blog.snowme34.com/post/no-scary-git/","excerpt":"","text":"All you need to know to work on Github with very small team in 3 min. Sign up Join GitHub Create Repo Create a new repository Give repo name. Can be changed later. Public Anyone can see Private You control who can see README The first page people see when open your repo. Usually in Markdown Invite repo’s settings -&gt; Collaborator -&gt; [type Github account] -&gt; invite (optional) copy invite link (or create one: https://github.com/[Your User Name]/[Your Repo Name]/invitations) Join Click the invitation link Fetch files from Github to local 1git clone https://github.com/[Your User Name]/[Your Repo Name].git If you are not owner or collaborator, you need to fork the repo and clone from your repo. If you just want to download other’s repo, use their “.git” link found in Clone or download, the big green button. Edit files Use your editor. Save the changes (commit) Commit is to “save your changes”. One reason why we use git is because it can revert changes and it separates “your currently working tree” and “committed files” that are stored in “.git” folder. (in the root dir of the repo in your local) 12git add .git commit -m \"[A Message for this commit]\" “git add .” actually “stages” the files. But you don’t need to know the difference right now. Upload your changes 1git push origin master origin is the upstream. master is the name of the branch you are working on. If you are owner of collaborators, you can choose to make the change instantly (you have other choices in settings). If you are not, you need to push to your repo and create a Pull Request in the original repo to actually contribute your changes. Download Changes of Other People 1git pull origin Start from Local Initialize an empty local git repo 1git init Maybe you also need to set the upstream too. Just follow the instruction. Best Friend 1git help [command] External Links git - the simple guide - no deep shit! Pro Git Git 指南","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"},{"name":"Programming Basis","slug":"Notes/Programming-Basis","permalink":"https://blog.snowme34.com/categories/Notes/Programming-Basis/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Git","slug":"Git","permalink":"https://blog.snowme34.com/tags/Git/"}]},{"title":"Rebuilding My Website","slug":"rebuild-note","date":"2018-03-24T14:27:02.000Z","updated":"2018-10-26T16:22:07.528Z","comments":true,"path":"post/rebuild-note/","link":"","permalink":"https://blog.snowme34.com/post/rebuild-note/","excerpt":"","text":"Background Story This is a sad story. It has been a while since my last website (a WordPress run on VPS) “vanished”. I doubt it was due to misconfiguration of Debian’s crontab I used to auto refresh the ssl certificate or something like that. I think I will post something like the Nginx config of it later on my blog. Ever since then have I had little time or energy to rebuild it, or more precisely, to maintain it. It is very tempting to use the WordPress again since it is so easy to make it run and so popular and so easy to find plugins. But the thing is, running on a VPS means it depends on some unstable services. When the VPS provider reboots the server, it is sometimes required to manually reboot Nginx service (or reload ssl keys refreshed by the bot of Let’s Encrypt. Their bot was still beta at that time). And it is also very hard to maintain due to the cost of the VPS itself and other problems too. So I decided to make use of Github Pages. It looks like I need to start from the scratch again: to buy a new domain since the old one was ugly and hard to remember, to configure the DNS, to reconfigure Zoho emails (I had 10 different emails for my old domain to register on different websites), to choose the theme of the blog, to decide the structure of the whole website etc. (I tried to use Readthedocs for my wiki page, the page for all of my pure notes, and struggled to “fix” the package requirements for different versions of python of their codes sad face) Long story short. Let’s dive into the main point of this post! Process of setting up hexo Note: the following notes was written as a comprehensive tutorial. Setting up environment Prerequisites: Github account Go to Github and sign up Github Page repository At least one repository to store the generated website on Github is required. Just go to your Github home page and create a new repository following the instruction. You can either create it as a public or private repo. Other people cannot see the content of your private repo but since your Github page will be published you website will eventually be public. There is a little trick here. If you name your repo as “YOUR_GITHUB_USER_NAME.github.io”, then your Github Page will automatically be published with that URL. Please read the documentation for more details. npm hexo In brief, install npm, hexo and create a Github repo. That is almost all you need to host a website on Github for free! You don’t need to worry about SSL, don’t need to pay the fees for renting a server. So awesome thanks to Github! Structure Like I said before, previously I had different subdomains for different purposes. I had wiki, blog, me, doc, etc. And I used one simple page as the whole “site map” for all of them. Same thing again for me. Other choices may include: use one and only one website for the blog use hexo as a “show off” page to “show off” the frontend skills (something like a portfolio) use Github Pages as a website to host demo web applications and many many more! Choosing theme for hexo Since I use hexo for most of my web sites, it’s crucial to have a pretty and fit theme. You can surely create your own theme too! Place for you to seek for hexo themes. Potential blog theme: simple-black icarus Potential wiki theme: doc Potential moe theme: gal Potential “show off” theme: hollow Initialize a local hexo folder Please refer to the official hexo documentation for further details. open terminal in your ideal directory For windows, for example, winkey + r and rum cmd. cd \\d “path to directory”. type the following command to generate the initial hexo folder 1hexo init customize _config.yml to meet personal need For example, change the name of the site, change the theme and so on. config _config.yml to use git to publish the website 1234deploy: type: git repository: https://github.com/YOUR_GITHUB_USER_NAME/YOUR_REPO_FOR_THIS_SITE.git branch: master add a post for our website to have something to show Hexo will give provide us with a “hello world” post. Feel free to delete it. Register a domain Compare different domain name service providers. There is a cool website called domcomp Pay highly attention to the different prices of buying a new one and renewing an old one and transferring domain to another provider. Some general tips: Search for coupons first. For instance, one can use “PRIVACYPLEASE” to have free privacy on name.com. I don’t feel like posting my personal opinion about which one is better here, however. Github Page domain setting Please read the official Github tutorial for further details add customized subdomain to correspondent Github page settings change CNAME record of DNS provider don’t forget to add CNAME file to your hexo “source” folder or hexo will delete the CNAME config of Github Page. Or you could try to add the following line to the “deploy” of hexo config link to document: (note the grammar of yaml) 1delete: false Publish generate the website 1hexo generate or you can also use 1hexo g make sure you set up the git deploy config properly deploy your website generated by hexo 1hexo deploy or you can also use 1hexo d Process of rebuild the site It looks like we have some website running. But where are the contents? Sign up for a image host to hold the pictures I have no idea if this is necessary or not for Github Pages. For VPS, in order to have better speed to load the pictures and to save storage, it is generally preferred to not save the pictures directly on your own server but on an image host. You can try imgur and follow the instructions! Re-upload the old posts Edit and update old posts! Reference links All the documentations mentioned above http://chuangzaoshi.com/operate https://www.v2ex.com/t/331613","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"},{"name":"Web-hosting","slug":"Notes/Web-hosting","permalink":"https://blog.snowme34.com/categories/Notes/Web-hosting/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://blog.snowme34.com/tags/Tutorial/"},{"name":"Web-hosting","slug":"Web-hosting","permalink":"https://blog.snowme34.com/tags/Web-hosting/"}]},{"title":"Modest Informal Password Advice","slug":"advice","date":"2018-03-22T07:00:00.000Z","updated":"2018-10-26T16:22:07.524Z","comments":true,"path":"post/advice/","link":"","permalink":"https://blog.snowme34.com/post/advice/","excerpt":"","text":"个人对于密码设置的建议 本文只是个人建议，仅供参考，写出来主要给自己留个note 其实写这个原因是没多少人写 这里先简单说一下密码是怎么破解的。 首先破解者能够访问输入用户名和密码的地方，要先找到门口。第一层防御就是隐藏这个访问点。 对于端口，可以调高指定端口，但是所有端口只有6万个，很快就能扫描完成。 对于网页，就可以用一些特殊地址掩盖真实的登陆页面。 对于wifi，可以禁止SSID广播。 这时需要一个用户名和一个密码。 用户名在许多情况下都是注册时候用的邮箱地址。为了在这一个地方防御住，需要用非通用邮箱注册。包括但不限于域名邮箱地址，一次性邮箱地址。 花花绿绿的hello@abc.xyz这样的域名邮箱听起来很神奇，看起来很神奇，其实很简单。简单的话可以去域名商购买一个低价冷门域名，然后forward到真实的邮箱。还可以去zoho这样的地方得到。 当然一般情况下都是知道用户名才会去尝试破解。 密码一般都是暴力破解。 注：破解密码和盗取密码不一样。如有些古老的网站会把密码用明文传输，直接抓包就行了。 为了从最有可能的密码开始尝试，可以用字典，彩虹表等。简单来讲就是最常见密码放在一起。例如生日，每年只有12个月，每个月只有30天左右，从当前日期往回倒退猜也不会有无限年份，用纯生日做密码是及其危险的。想一想有多少人把aabbccdd作为wifi密码。 当然如果密码泄露了，比如在坏坏的公共wifi登陆并进行危险操作，就不用暴力破解了。 防止暴力破解可以试试添加尝试次数上限（这取决于网络服务提供商）和两步验证。为了让其前功尽弃，还是经常改密码比较安全。 正文 Step 1. 生成一个纯随机文本 到了暴力破解这一步，只是一个时间问题。可以参考一下这两个暴力破解表格：暴力破解时间表格1，暴力破解时间表格2。为了让你的密码能够坚持到被暴力破解这一个步骤，不在字典攻击就被拿下，你需要一个纯随机的文本作为密码。 你可以自己写一个随机文本产生器，也可以用计算器自带的，也可以去应用商城下载一个。这里推荐random网站提供的随机密码生成。 当然在大多数情况下，为了方便记忆，你还是可以自己想出一个接近于纯随机的密码。 可以弄一个西班牙语单词和汉语拼音的混合体，中间再加点你最喜欢的化学元素的中子数和标点符号。 Step 2. 改编这个纯随机文本 费了这么大劲得到的一个纯随机文本，光记住都要再花一些时间，怎么能直接就用作密码呢？（大雾，为了安全，在最重要的地方还是完全没有使用过的纯随机密码保险） 可以试试在这个随机文本前面或者后面加上密码用途的标识符（如笔记就是ThoSto（thought store，思想存储，这样奇怪的东西反而好记也不好被猜到）），这个标识符可以用在你所有跟笔记有关的账户上，但尽量不要重复，可以改大小写和添加标点符号。然后在密码主题的后面加上你所注册的账户的唯一标识符，如印象笔记就是ImpLike（Impression印象，Like像），最后再随便加几个标点符号，如在ImpLike之间加一个下划线，在最后加一个感叹号之类的。比较有特色的可以把这个网站名字读50遍，然后把嘴里发出的那个音用拼音写下来当结尾。 每次设置新密码的时候可以把这3各部分的位置互换。 好了，现在最大的问题就是密码太长了，有些网站无法注册，裁剪即可。 Step 3. 使用这个强密码 在注册新账户的时候在密码一栏填写就可以了。也可以把现有账户的密码改成这个。 当然也可以直接使用lastpass这样的软件、浏览器插件。这里也推荐用该类软件保存非重要网站、账户的密码。强烈推荐keepass和面向Linux桌面的keepassxc. 注意存放这个密码。网络安全最大的漏洞都是来源于使用者。都知道要改默认PIN，但事实上机会没有人会记得去改它。 注：此文不是对于保护上网隐私的描述。也不是防御网络攻击的描述。 注：本文为简单记叙文，内容没有经过严格验证。","categories":[{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/categories/Notes/"}],"tags":[{"name":"zh-CN","slug":"zh-CN","permalink":"https://blog.snowme34.com/tags/zh-CN/"},{"name":"Notes","slug":"Notes","permalink":"https://blog.snowme34.com/tags/Notes/"}]},{"title":"Shakespeare Sonnet 18 Chinese Translation","slug":"Sonnet-18-zh-CN-translation","date":"2018-03-22T06:49:40.000Z","updated":"2018-10-26T16:22:07.523Z","comments":true,"path":"post/Sonnet-18-zh-CN-translation/","link":"","permalink":"https://blog.snowme34.com/post/Sonnet-18-zh-CN-translation/","excerpt":"","text":"Sonnet 18 作者：莎士比亚 William Shakespeare 翻译：snowme34 非商业转载请标明出处，商业转载请联系作者获得授权 Shall I compare thee to a summer’s day? 我能，把你比作一个夏天吗？ Thou art more lovely and more temperate: 可你，却更可爱而又更纤婉: Rough winds do shake the darling buds of May, 暴风，摇曳着五月的娇柔花蔓， And summer’s lease hath all too short a date: 夏止，默默离去之间的悄然: Sometime too hot the eye of heaven shines, 时时，天堂的光辉金迷纸醉， And often is his gold complexion dimm’d; 看吧，他高贵的面容已日渐憔悴; And every fair from fair sometime declines, 即是，雍容之物终将会破碎， By chance, or nature’s changing course, untrimm’d; 只因，偶然亦或是自然之愧； But thy eternall summer shall not fade, 但是，永恒之夏绝不凋零， Nor loose possession of that fair thou ow’st; 也不，不愿失去珍贵感情; Nor shall Death brag thou wander’st in his shade, 亦无，无人手持镰斧之柄， When in eternal lines to time thou grow’st: 而当一切，恒如此诗此时: So long as men can breathe, or eyes can see, 恒如，生灵之吐息之执， 恒如，视界之尽头之尺， So long lives this, and this gives life to thee. 恒如，生之所生， 恒如，你亘古的美丽。","categories":[{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/categories/Literature/"},{"name":"Translations","slug":"Literature/Translations","permalink":"https://blog.snowme34.com/categories/Literature/Translations/"}],"tags":[{"name":"Shakespeare","slug":"Shakespeare","permalink":"https://blog.snowme34.com/tags/Shakespeare/"},{"name":"zh-CN","slug":"zh-CN","permalink":"https://blog.snowme34.com/tags/zh-CN/"},{"name":"Literature","slug":"Literature","permalink":"https://blog.snowme34.com/tags/Literature/"},{"name":"Original","slug":"Original","permalink":"https://blog.snowme34.com/tags/Original/"}]}]}